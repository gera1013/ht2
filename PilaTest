/**
 * @author Gerardo
 * Hoja 2
 * Majo Castro 181202
 * Gerardo Mendez 18239
 * 1/02/2019
 */

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Gerardo
 * @author Majo!
 */
public class PilaTest 
{
    
    public PilaTest() 
    {
        
    }
    
    @BeforeClass
    public static void setUpClass() 
    {
        
    }
    
    @AfterClass
    public static void tearDownClass() 
    {
        
    }
    
    @Before
    public void setUp() 
    {
        
    }
    
    @After
    public void tearDown() 
    {
        
    }

    /**
     * Test of push method, of class Pila.
     */
    @Test
    public void testPush() 
    {
        System.out.println("push");
        Object item = "a";
        Pila instance = new Pila();
        instance.push(item);
        assertEquals(instance.peek(), item);
    }

    /**
     * Test of pop method, of class Pila.
     * Existe un valor definido. El test compara  ese valor con el que se saca 
     * del stack. De ser iguales el test es aprobado, de no ser asi el test falla.
     * Solo hay un valor por lo que el stack debe quedar vacio luego del test.
     */
    @Test
    public void testPop() 
    {
        System.out.println("pop");
        Pila instance = new Pila();
        instance.push("a");
        Object expResult = "a";
        Object result = instance.pop();
        assertEquals(expResult, result);
        boolean x = instance.empty();
        System.out.println(x);
    }

    /**
     * Test of peek method, of class Pila.
     * Devuelve el valor del ultimo item del stack, si es igual al definido se aprueba 
     * el test, de no ser igual no se aprueba.
     */
    @Test
    public void testPeek() 
    {
        System.out.println("peek");
        Pila instance = new Pila();
        instance.push("a");
        String expResult = "a";
        Object result = instance.peek();
        assertEquals(expResult, result);
    }

    /**
     * Test of empty method, of class Pila.
     * El stack esta vacío, por lo que el método debe regresar true.
     */
    @Test
    public void testEmpty() 
    {
        System.out.println("empty");
        Pila instance = new Pila();
        boolean expResult = true;
        boolean result = instance.empty();
        assertEquals(expResult, result);
    }

    /**
     * Test of size method, of class Pila.
     */
    @Test
    public void testSize() 
    {
        System.out.println("size");
        Pila instance = new Pila();
        instance.push("a");
        instance.push("b");
        instance.push("c");
        instance.push("d");
        instance.push("e");
        int expResult = 5;
        int result = instance.size();
        assertEquals(expResult, result);
    }
}
